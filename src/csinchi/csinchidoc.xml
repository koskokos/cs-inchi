<?xml version="1.0"?>
<doc>
    <assembly>
        <name>CSInChI</name>
    </assembly>
    <members>
        <member name="T:CSInChI.InChI_Struct_Output">
             <summary>
             A structure that holds structural data from the
             LibInChI.ParseInChI method. This structure should be 
             used with the try/finally pattern to ensure deallocation
             of the unmanaged memory.
             </summary>
             <seealso cref="M:CSInChI.LibInChI.ParseInChI(CSInChI.InChI_String_Input@,CSInChI.InChI_Struct_Output@)"/>
             
             <example>This example illustrates the use of this structure.
             <code>
            class Program
            {
                static void Main(string[] args)
                {
                    string inchi = "InChI=1/C2H2F2/c3-1-2-4/h1-2H/b2-1+";
                    InChI_String_Input inp = new InChI_String_Input(inchi);
                    InChI_Struct_Output outStruct = new InChI_Struct_Output();
            
                    try
                    {
                        int ret = LibInChI.ParseInChI(ref inp, out outStruct);
                        object retCode = Enum.ToObject(typeof(InChIRetVal), ret);
                        Console.WriteLine(retCode);
            
                        foreach (InChI_Atom atom in outStruct.GetAtoms())
                        {
                            Console.WriteLine(atom.ElementName + " " + atom.NumBonds);
                        }
                    }
                    finally
                    {
                        //free the unmanaged memory
                        outStruct.Dispose();
                    }
                }
            }
             </code></example>
        </member>
        <member name="F:CSInChI.InChI_Struct_Output.AtomsPtr">
            <summary>
            A pointer to the first atom in the array of atoms
            </summary>
        </member>
        <member name="F:CSInChI.InChI_Struct_Output.StereoDataPtr">
            <summary>
            A pointer to the first Stereo0D structure in the array
            of Stereo0D structures.
            </summary>
        </member>
        <member name="F:CSInChI.InChI_Struct_Output.NumAtoms">
            <summary>
            The number of AtomsPtr in the structure. Max value is
            1024.
            </summary>
        </member>
        <member name="F:CSInChI.InChI_Struct_Output.NumStereo0D">
            <summary>
            The number of Stereo0D structures.
            </summary>
        </member>
        <member name="F:CSInChI.InChI_Struct_Output.ErrorMessage">
            <summary>
            A string containing error/warning messages.
            </summary>
        </member>
        <member name="F:CSInChI.InChI_Struct_Output.OutputLog">
            <summary>
            A string containing a list of recognized options and 
            possibly an Error/warning message. 
            </summary>
        </member>
        <member name="F:CSInChI.InChI_Struct_Output.WarningFlags">
            <summary>
            An array of warning flags. Do to the lack of support
            for marshaling nested arrays the values may not be set correctly.
            </summary>
        </member>
        <member name="M:CSInChI.InChI_Struct_Output.GetAtoms">
            <summary>
            Converts the AtomsPtr to an array of InChI_Atom structures.
            </summary>
            <returns>An array of InChI_Atom structures</returns>
        </member>
        <member name="M:CSInChI.InChI_Struct_Output.GetStereoData">
            <summary>
            Converts the StereoDataPtr to an array of InChI_Stereo0D structures.
            </summary>
            <returns>An array of InChI_Stereo0D structures</returns>
        </member>
        <member name="M:CSInChI.InChI_Struct_Output.Dispose">
            <summary>
            Releases all resources used by this structure.
            </summary>
        </member>
        <member name="T:CSInChI.InChI_String_Output">
            <summary>
            A structure that holds the output data from methods
            that create an InChI. If the fields are initalized
            by the GetInChI(ref InChI_Struct_Input structData, out InChI_String_Output output)
            method the try/finally pattern should be used to ensure deallocation
            of the unmanaged memory.
            </summary>
            <example></example>
            <seealso cref="M:CSInChI.LibInChI.GetInChI(CSInChI.InChI_Struct_Input@,CSInChI.InChI_String_Output@)"/>
        </member>
        <member name="F:CSInChI.InChI_String_Output.InChI">
            <summary>
            The InChI string.
            </summary>
        </member>
        <member name="F:CSInChI.InChI_String_Output.AuxInfo">
            <summary>
            A string containg the aux info.
            </summary>
        </member>
        <member name="F:CSInChI.InChI_String_Output.ErrorMessage">
            <summary>
            A string containing error/warning messages.
            </summary>
        </member>
        <member name="F:CSInChI.InChI_String_Output.OutputLog">
            <summary>
            A string containing a list of recognized options and 
            possibly an Error/warning message. 
            </summary>
        </member>
        <member name="M:CSInChI.InChI_String_Output.Dispose">
            <summary>
            Releases all resources used by this structure.
            </summary>
        </member>
        <member name="T:CSInChI.LibInChI">
             <summary>
             A class providing access to the IUPAC InChI library.
             </summary>
             <seealso cref="T:CSInChI.InChI_String_Input"/>
             <seealso cref="T:CSInChI.InChI_Struct_Input"/>
             <seealso cref="T:CSInChI.InChI_Struct_Output"/>
             <seealso cref="T:CSInChI.InChI_String_Output"/>
             <example> This examples illustrates the use of the of
             the InChI library from C#. An inchi is used to generate a
             structure and an inchi key then the structure is used to
             create the text for an sdf file.
             <code>
            class Program
            {
                static void Main(string[] args)
                {    
            
                     string inchi = "InChI=1/H3N/h1H3";          
                     InChI_String_Input inp = new InChI_String_Input(inchi);
                     InChI_Struct_Output outStruct = new InChI_Struct_Output();
            
                     try
                     {
                        int ret = LibInChI.ParseInChI(ref inp, out outStruct);
                        object retCode = Enum.ToObject(typeof(InChIRetVal), ret);
            
                        if (ret == (int)InChIRetVal.INCHI_Ret_OKAY)
                        {
                            string key = LibInChI.GetInChIKey(inchi);
            
                            //output text for an sdf file.
                            string strucOpt = "/OutputSDF";
                            InChI_Struct_Input inpStruct = new InChI_Struct_Input(outStruct.GetAtoms(),strucOpt);
                            
                            string sdfText = LibInChI.GetInChI(ref inpStruct);
                            
                            //mod the key string to write it as an sdf property.
                            key = @"&gt; " + "\n    " + key + "\n$$$$";    
                            
                            //insert the property before the end of record characters                  
                            sdfText = sdfText.Insert(sdfText.Length - 4, key);
                            
                            File.WriteAllText("struc1.sdf", sdfText);     
                        }
                     }
                     finally
                     { 
                       //free the unmanaged memory
                       outStruct.Dispose();
                   }
                }
            }</code>
             </example>
        </member>
        <member name="F:CSInChI.LibInChI.ISOTOPIC_SHIFT_FLAG">
            <summary>
            Constant defined in inchi_api.h
            
             Add to isotopic mass if isotopic_mass =     
             (isotopic mass - average atomic mass)
            </summary>
        </member>
        <member name="F:CSInChI.LibInChI.ISOTOPIC_SHIFT_MAX">
             <summary>
             Constant defined in inchi_api.h
            
             max abs(isotopic mass - average atomic mass)
             </summary>
        </member>
        <member name="F:CSInChI.LibInChI.MAX_BONDS">
            <summary>
            Constant defined in inchi_api.h (MAXVAL)
            The maximum number of bonds an atom can be involved in.
            </summary>
        </member>
        <member name="F:CSInChI.LibInChI.NUM_H_ISOTOPES">
            <summary>
            Constant defined in inchi_api.h
            The number of isotopes of hydrogen
            </summary>
        </member>
        <member name="F:CSInChI.LibInChI.ATOM_EL_LEN">
            <summary>
             Constant defined in inchi_api.h
             The length of the char array which stores the
             symbol for an element.
            </summary>
        </member>
        <member name="F:CSInChI.LibInChI.NO_ATOM">
            <summary>
            Constant defined in inchi_api.h.
            The value to use for the central atom
            of an Inchi_Stereo0D structure if the stereo
            type is not allene or tetrahedral.
            </summary>
        </member>
        <member name="M:CSInChI.LibInChI.ParseInChI(CSInChI.InChI_String_Input@,CSInChI.InChI_Struct_Output@)">
             <summary>
             An external method that calls the GetStructFromINCHI function
             in the IUPAC InChI library. The unmanaged memory is deallocated
             when the Dispose method of the InChI_Struct_Output is called.
             </summary>
             <param name="input">the structure that holds the input data</param>
             <param name="output">the structure that holds the output</param>
             <returns>an error code indicating the success or failure of the function call</returns>
             <summary>
             A structure that holds structural data from the
             LibInChI.ParseInChI method. This structure should be 
             used with the try/finally pattern to ensure deallocation
             of the unmanaged memory.
             </summary>
             <seealso cref="M:CSInChI.LibInChI.ParseInChI(CSInChI.InChI_String_Input@,CSInChI.InChI_Struct_Output@)"/>\
             <example>This example illustrates the use of this method.
             <code>
            class Program
            {
                static void Main(string[] args)
                {
                    string inchi = "InChI=1/C2H2F2/c3-1-2-4/h1-2H/b2-1+";
                    InChI_String_Input inp = new InChI_String_Input(inchi);
                    InChI_Struct_Output outStruct = new InChI_Struct_Output();
            
                    try
                    {
                        int ret = LibInChI.ParseInChI(ref inp, out outStruct);
                        object retCode = Enum.ToObject(typeof(InChIRetVal), ret);
                        Console.WriteLine(retCode);
            
                        foreach (InChI_Atom atom in outStruct.GetAtoms())
                        {
                            Console.WriteLine(atom.ElementName + " " + atom.NumBonds);
                        }
                    }
                    finally
                    {
                        //free the unmanaged memory
                        outStruct.Dispose();
                    }
                }
            }
             </code></example>
        </member>
        <member name="M:CSInChI.LibInChI.GetInChI(CSInChI.InChI_Struct_Input@,CSInChI.InChI_String_Output@)">
            <summary>
            An external method that calls the GetINCHI function
            in the IUPAC InChI library. The unmanaged memory is deallocated 
            when the Dispose method of the InChI_String_Output is called.
            </summary>
            <param name="structData">the structure that holds the input structure data</param>
            <param name="output">the structure that holds the InChI output</param>
            <returns>an error code indicating the success or failure of the function call</returns>
        </member>
        <member name="M:CSInChI.LibInChI.GetInChIKey(System.String,System.Text.StringBuilder)">
            <summary>
            An external method that calls the GetINCHIKeyFromINCHI function
            in the IUPAC InChI library. The StringBuilder that holds the output
            should be initialized with a capacity of 26. Requires version 1.0.2 or later of
            the library. 
            </summary>
            <param name="inchi">the inchi string</param>
            <param name="sb">a StringBuilder to hold the InChI key output</param>
            <returns>an error code indicating the success or failure of the function call</returns>
        </member>
        <member name="M:CSInChI.LibInChI.CheckInChIKey(System.String)">
            <summary>
            An external method that calls the CheckInChIKey function
            in the IUPAC InChI toolkit. Requires version 1.0.2 or later of
            the library.
            </summary>
            <seealso cref="T:CSInChI.CheckInChIKeyResult"/>
            <param name="inchiKey">the inchi key</param>
            <returns>an error code indicating the success or failure of the function call</returns>
        </member>
        <member name="M:CSInChI.LibInChI.DeallocateOutputStruct(CSInChI.InChI_Struct_Output@)">
            <summary>
            Frees the unmanaged memory used allocated by the
            ParseInChI method. It is unecessary to explicitly call this method
            as it is called in the Dispose method of the InChI_Struct_Output structure.
            </summary>
            <param name="outputStruct">the InChI_Struct_Output to deallocate </param>
        </member>
        <member name="M:CSInChI.LibInChI.DeallocateInChIString(CSInChI.InChI_String_Output@)">
            <summary>
            Frees the unmanaged memory allocated by the GetInChI method.It is unecessary to explicitly call this method
            as it is called in the Dispose method of the InChI_String_Output structure.
            </summary>
            <param name="inchiOut">the InChI_String_Output to deallocate</param>
        </member>
        <member name="M:CSInChI.LibInChI.GetInChIFromInChI(CSInChI.InChI_String_Input@,CSInChI.InChI_String_Output@)">
            <summary>
            An external method that call the GetINCHIFromINCHI function
            in the IUPAC InChI library.
            </summary>
            <param name="inp">the input inchi</param>
            <param name="outStruct">the struct that will hold the output</param>
            <returns>an error code indicating the success or failure of the function call</returns>
        </member>
        <member name="M:CSInChI.LibInChI.ParseInChI(System.String,System.String,CSInChI.InChI_Struct_Output@)">
             <summary>
             A convenience overload of ParseInChI that takes 2 strings
             rather than a InChI_String_Input. The user is responsible for
             calling the Dispose method of the InChI_Struct_Output structure to free
             unmanaged memory. Options start with '-' in Windows or 
             '/' for other platforms. See the documentation for the IUPAC library for
             information about the options.
             </summary>
             <param name="inchi">the inchi string</param>
             <param name="options">the space delimited option string</param>
             <param name="outStruct">the structure that will hold the output</param>
             <returns>an error code indicating the success or failure of the function call</returns>
                
             <example>This example illustrates the use of this method.
             <code>
            class Program
            {
                static void Main(string[] args)
                {
                    string inchi = "InChI=1/C2H2F2/c3-1-2-4/h1-2H/b2-1+";
                    string options = "-k";
                    InChI_Struct_Output outStruct = new InChI_Struct_Output();
            
                    try
                    {
                        int ret = LibInChI.ParseInChI(inchi, out outStruct);
                        object retCode = Enum.ToObject(typeof(InChIRetVal), ret);
                        Console.WriteLine(retCode);
            
                        foreach (InChI_Atom atom in outStruct.GetAtoms())
                        {
                            Console.WriteLine(atom.ElementName + " " + atom.NumBonds);
                        }
                    }
                    finally
                    {
                        //free the unmanaged memory
                        outStruct.Dispose();
                    }
                }
            }
             </code></example>
        </member>
        <member name="M:CSInChI.LibInChI.ParseInChI(System.String,CSInChI.InChI_Struct_Output@)">
            <summary>
            A convenience overload of ParseInChI that passes an empty
            option string. The user is responsible for calling the 
            Dispose method of the InChI_Struct_Output structure to free
            unmanaged memory.
            </summary>
            <param name="inchi">the inchi string</param>
            <param name="outStruct">the structure that will hold the output</param>
            <returns>an error code indicating the success or failure of the function call</returns>
        </member>
        <member name="M:CSInChI.LibInChI.GetInChI(CSInChI.InChI_Struct_Input@)">
            <summary>
            A convenience overload of GetInChI that returns the inchi string
            or an empty string if the underlying platform invoke call fails.
            This method frees all unmanaged
            resources allocated by the underlying platform invoke call.
            </summary>
            <param name="inp">the input structural data</param>
            <returns>an error code indicating the success or failure of the function call</returns>
        </member>
        <member name="M:CSInChI.LibInChI.GetInChI(CSInChI.InChI_Struct_Input@,System.Int32@)">
            <summary>
            A convenience overload of GetInChI that returns the inchi string
            or an empty string if the underlying platform invoke call fails.
            This method frees all unmanaged
            resources allocated by the underlying platform invoke call.
            </summary>
            <param name="inp">the structure holding the input data</param>
            <param name="retCode">an integer to store the return value from the underlying platform invoke call</param>
            <returns>the inchi code or the empty string</returns>
        </member>
        <member name="M:CSInChI.LibInChI.GetInChIKey(System.String)">
            <summary>
            A convenience overload of GetInChIKey that takes a string input. 
            The method returns an empty string or null if the underlying
            platform invoke call fails. 
            </summary>
            <param name="inchi">the input inchi</param>
            <returns>the inchi key</returns>
        </member>
        <member name="M:CSInChI.LibInChI.GetInChIKey(System.String,System.Int32@)">
            <summary>
            A convenience overload of GetInChIKey that takes a string input. The method 
            returns an empty string or null if the underlying
            platform invoke call fails. The int parameter stores the return value
            from the platform invoke call.
            </summary>
            <param name="inchi">the inchi string</param>
            <param name="retCode">an int that holds the return value of the underlying function</param>
            <returns>the inchi key</returns>
        </member>
        <member name="M:CSInChI.LibInChI.GetInChIFromInChI(System.String,System.String)">
            <summary>
            A convenience overload of GetInChIFromInChI that takes two strings.
            invoke call. The method returns an empty string or null if the underlying
            platform invoke call fails. Options start with '-' in Windows or 
            '/' for other platforms. See the documentation for the IUPAC library for
            information about the options. This method frees all unmanaged
            resources allocated by the underlying platform invoke call.
            </summary>
            <param name="inputInChI">the input inchi</param>
            <param name="options">the space delimited options string</param>
            <returns>the output inchi or an empty string</returns>
        </member>
        <member name="M:CSInChI.LibInChI.GetInChIFromInChI(System.String,System.String,System.Int32@)">
            <summary>
            A convenience overload of GetInChIFromInChI that takes two strings.
            The int parameter stores the return value of the underlying platform
            invoke call. The method returns null or an empty string if the underlying
            platform invoke call fails. Options start with
            '-' in Windows or '/' for other platforms. See the documentation for the IUPAC library for
            information about the options. This method frees all unmanaged
            resources allocated by the underlying platform invoke call.
            </summary>
            <param name="inputInChI">the input inchi</param>
            <param name="options">the space delimited options string</param>
            <param name="retCode">an integer to store the return value of the unmanaged function</param>
            <returns>the output inchi, null, or an empty string</returns>
        </member>
        <member name="T:CSInChI.InChI_String_Input">
             <summary>
             A struct that holds the input data for the ParseInChI(ref InChI_String_Input input, out InChI_Struct_Output output) method.
             </summary>
            <seealso cref="!:LibInChI.ParseInChI(ref InChI_String_Input input, out InChI_Struct_Output output) "/>
        </member>
        <member name="M:CSInChI.InChI_String_Input.#ctor(System.String,System.String)">
            <summary>
            Creates a new InChI_String_Input struct with the specified
            space delimited options string.
            </summary>
            <param name="inchiString">the inchi string</param>
            <param name="options">the string containing the list of options</param>
        </member>
        <member name="M:CSInChI.InChI_String_Input.#ctor(System.String)">
            <summary>
            Creates a new InChI_String_Input with an empty options
            string.
            </summary>
            <param name="inchiString">the inchi string</param>
        </member>
        <member name="F:CSInChI.InChI_String_Input.inchiString">
            <summary>
            The InChI string.
            </summary>
        </member>
        <member name="F:CSInChI.InChI_String_Input.options">
            <summary>
            The space delimited string of options. Options start with
            '-' in Windows or '/' for other platforms.
            </summary>
        </member>
        <member name="T:CSInChI.InChI_Struct_Input">
            <summary>
            A struct that holds input structural data for the GetInChI
            method. This structure should be used with the try/finally
            pattern to ensure deallocation of the unmanaged memory.
            </summary>
        </member>
        <member name="M:CSInChI.InChI_Struct_Input.#ctor(System.Collections.Generic.IList{CSInChI.InChI_Atom})">
            <summary>
            Creates a new instance of this structure with no
            stereo data and an empty options string.
            </summary>
            <param name="atoms"></param>
        </member>
        <member name="M:CSInChI.InChI_Struct_Input.#ctor(System.Collections.Generic.IList{CSInChI.InChI_Atom},System.Collections.Generic.IList{CSInChI.Inchi_Stereo0D},System.String)">
            <summary>
            Creates a new instance from the specified inputs.
            </summary>
            <param name="atoms">the array of atoms contained by this structure</param>
            <param name="stereoData">the stereo data</param>
            <param name="options">the space delimited options string</param>
        </member>
        <member name="M:CSInChI.InChI_Struct_Input.#ctor(System.Collections.Generic.IList{CSInChI.InChI_Atom},System.String)">
            <summary>
            Creates a new InChI_Atom with no stereo data.
            </summary>
            <param name="atoms">an IList of atoms contained by this structure</param>
            <param name="options">the space delimited options string</param>
        </member>
        <member name="F:CSInChI.InChI_Struct_Input.AtomsPtr">
            <summary>
            A pointer to the first atom in the array of atoms
            </summary>
        </member>
        <member name="F:CSInChI.InChI_Struct_Input.StereoDataPtr">
            <summary>
            A pointer to the first Stereo0D structure in the array
            of Stereo0D structures.
            </summary>
        </member>
        <member name="F:CSInChI.InChI_Struct_Input.Options">
            <summary>
            The space delimited string of options. Options start with
            '-' or '/' depending on the platform.
            </summary>
        </member>
        <member name="F:CSInChI.InChI_Struct_Input.NumAtoms">
            <summary>
            The number of AtomsPtr in the structure. Max value is
            1024.
            </summary>
        </member>
        <member name="F:CSInChI.InChI_Struct_Input.NumStereo0D">
            <summary>
            The number of Stereo0D structures.
            </summary>
        </member>
        <member name="M:CSInChI.InChI_Struct_Input.SetAtoms(System.Collections.Generic.IList{CSInChI.InChI_Atom})">
            <summary>
            Converts an array of InChI_Atoms into a series of pointers
            in unmanaged memory.
            </summary>
            <param name="atoms">the array of InChI_Atoms to set.</param>
        </member>
        <member name="M:CSInChI.InChI_Struct_Input.SetStereoData(System.Collections.Generic.IList{CSInChI.Inchi_Stereo0D})">
            <summary>
            Converts an array of InChI_Stereo0D structures into a series
            of pointers in unmanaged memory.
            </summary>
            <param name="stereoData">the array of InChI_Stereo0D structures</param>
        </member>
        <member name="M:CSInChI.InChI_Struct_Input.Dispose">
            <summary>
            Releases all resources used by this structure.
            </summary>
        </member>
        <member name="T:CSInChI.InChIRetVal">
            <summary>
            A set of enumerated constants for the error codes returned by the
            LibInChI.GetInChI and ParseInChI methods. 
            </summary>
        </member>
        <member name="F:CSInChI.InChIRetVal.INCHI_Ret_SKIP">
            <summary>
            Not used in the InChI library. The value is included only for completeness.
            </summary>
        </member>
        <member name="F:CSInChI.InChIRetVal.INCHI_Ret_EOF">
            <summary>
            No structural data has been provided
            </summary>
        </member>
        <member name="F:CSInChI.InChIRetVal.INCHI_Ret_OKAY">
            <summary>
            Success; no errors or warnings 
            </summary>
        </member>
        <member name="F:CSInChI.InChIRetVal.INCHI_Ret_WARNING">
            <summary>
             Success; warning(s) issued
            </summary>
        </member>
        <member name="F:CSInChI.InChIRetVal.INCHI_Ret_ERROR">
            <summary>
             Error: no InChI has been created 
            </summary>
        </member>
        <member name="F:CSInChI.InChIRetVal.INCHI_Ret_FATAL">
            <summary>
            Severe error: no InChI has been created (typically, memory allocation failure) 
            </summary>
        </member>
        <member name="F:CSInChI.InChIRetVal.INCHI_Ret_UNKNOWN">
            <summary>
             Unknown program error 
            </summary>
        </member>
        <member name="F:CSInChI.InChIRetVal.INCHI_Ret_BUSY">
            <summary>
            A previous call to InChI has not returned yet.
            </summary> 
        </member>
        <member name="T:CSInChI.InChI_Bond_Type">
            <summary>
            A set of enumerated constants corresponding to InChI bond types.
            </summary>
        </member>
        <member name="F:CSInChI.InChI_Bond_Type.INCHI_BOND_TYPE_NONE">
            <summary>
            No bond type specified.
            </summary>
        </member>
        <member name="F:CSInChI.InChI_Bond_Type.INCHI_BOND_TYPE_SINGLE">
            <summary>
            A single bond.
            </summary>
        </member>
        <member name="F:CSInChI.InChI_Bond_Type.INCHI_BOND_TYPE_DOUBLE">
            <summary>
            A double bond.
            </summary>
        </member>
        <member name="F:CSInChI.InChI_Bond_Type.INCHI_BOND_TYPE_TRIPLE">
            <summary>
            A triple bond.
            </summary>
        </member>
        <member name="F:CSInChI.InChI_Bond_Type.INCHI_BOND_TYPE_ALTERN">
            <summary>
            An unspecified bond type.
            Avoid using this constant by all means.
            </summary>
        </member>
        <member name="T:CSInChI.Radical_Type">
            <summary>
            A set of enumerated constants corresponding to InChI Radical types.
            </summary>
        </member>
        <member name="T:CSInChI.InChI_0D_StereoParity">
             <summary>
             A set of enumerated constants defining the 0D stereo parities
             used by the InChI library.
            
              0D parities are used if all atom coordinates are zeroes.
             </summary>
        </member>
        <member name="F:CSInChI.InChI_0D_StereoParity.Inchi_Stereo0D">
            <summary>
            
            </summary>
        </member>
        <member name="F:CSInChI.InChI_0D_StereoParity.INCHI_PARITY_ODD">
            <summary>
            
            </summary>
        </member>
        <member name="F:CSInChI.InChI_0D_StereoParity.INCHI_PARITY_UNDEFINED">
            <summary>
            Stereo parity is undefined. This value should
            only be used when only disconnected structure parity exists.
            </summary>
        </member>
        <member name="T:CSInChI.InChI_0D_StereoType">
            <summary>
            A set of enumerated constants defining the types of stereo center
            handled by the InChI library.
            </summary>
        </member>
        <member name="F:CSInChI.InChI_0D_StereoType.INCHI_StereoType_None">
            <summary>
            
            </summary>
        </member>
        <member name="F:CSInChI.InChI_0D_StereoType.INCHI_StereoType_DoubleBond">
            <summary>
            Indicates stereo chemistry about a double bond.
            The central atom index should be set to -1 when
            using this stereo type.
            </summary>
        </member>
        <member name="F:CSInChI.InChI_0D_StereoType.INCHI_StereoType_Tetrahedral">
            <summary>
            Indicates a tetrahedral the stereo center 
            </summary>
        </member>
        <member name="F:CSInChI.InChI_0D_StereoType.INCHI_StereoType_Allene">
            <summary>
            Stereo type used for allenes.
             The central atom index should be set to -1 when
            using this stereo type.
            </summary>
        </member>
        <member name="T:CSInChI.InChI_BondStereo2D">
            <summary>
            A set of enumerated constants defining the types of 2D stereo
            bond used by this InChI library. These values are used only if all neighbors of 
            this atom have same z-coordinate.
            as this atom
            </summary>
        </member>
        <member name="F:CSInChI.InChI_BondStereo2D.INCHI_BOND_STEREO_DOUBLE_EITHER">
            <summary>
            Unknown stereobond geometry
            </summary>
        </member>
        <member name="T:CSInChI.RetValGetInChIKey">
            <summary>
            A set of enumerated constants corresponding to error codes
            returned by the GetINCHIKey
            </summary>
        </member>
        <member name="F:CSInChI.RetValGetInChIKey.INCHIKEY_OK">
            <summary>
            The InChI key was successully generated. 
            </summary>
        </member>
        <member name="F:CSInChI.RetValGetInChIKey.INCHIKEY_UNKNOWN_ERROR">
            <summary>
            An error code return when an unspecified error
            occurs when calculating the InChI key. 
            </summary>
        </member>
        <member name="F:CSInChI.RetValGetInChIKey.INCHIKEY_EMPTY_INPUT">
            <summary>
            The error code returned when input string had a null value.
            </summary>
        </member>
        <member name="F:CSInChI.RetValGetInChIKey.INCHIKEY_NOT_INCHI_INPUT">
            <summary>
            The error code returned when the input string is not a
            valid InChI string.
            </summary>
        </member>
        <member name="F:CSInChI.RetValGetInChIKey.INCHIKEY_NOT_ENOUGH_MEMORY">
            <summary>
            An error code returned when the InChI library
            function cannot allocate the memory required
            to compute an InChI key.
            </summary>
        </member>
        <member name="F:CSInChI.RetValGetInChIKey.INCHIKEY_ERROR_IN_FLAG_CHAR">
            <summary>
            The error code returned if the length of the input InChI
            is less than 9.
            </summary>
        </member>
        <member name="T:CSInChI.CheckInChIKeyResult">
            <summary>
            A set of enumerated constants for the return values of the
            CheckInChIKey method
            </summary>
        </member>
        <member name="F:CSInChI.CheckInChIKeyResult.INCHIKEY_VALID">
            <summary>
            The input value is a valid InChI key.
            </summary>
        </member>
        <member name="F:CSInChI.CheckInChIKeyResult.INCHIKEY_INVALID_LENGTH">
            <summary>
            Error code indicating that the input key is greater or less than 26
            characters.
            </summary>
        </member>
        <member name="F:CSInChI.CheckInChIKeyResult.INCHIKEY_INVALID_LAYOUT">
            <summary>
            Error code indicating that the key has 1 or more
            invalid characters.
            </summary>
        </member>
        <member name="F:CSInChI.CheckInChIKeyResult.INCHIKEY_INVALID_CHECKSUM">
            <summary>
            Error code indicating that the check char 
            does not match the check sum.
            </summary>
        </member>
        <member name="T:CSInChI.InChI_Atom">
            <summary>
            A structure that holds atom data for input or output from InChI 
            library functions.
            </summary>
        </member>
        <member name="M:CSInChI.InChI_Atom.#ctor(System.String,System.Double,System.Double,System.Double,System.Int32[],System.Int32,System.Int32[],System.Int32[],System.Int32[],System.Int32,System.Int32,System.Int32)">
            <summary>
            A convenience overload that allows the user to input standard
            Int32 values instead of bytes, shorts, etc.
            </summary>
            <param name="symbol"></param>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
            <param name="neighborIndices"></param>
            <param name="numBonds"></param>
            <param name="bondTypes"></param>
            <param name="bondStereo"></param>
            <param name="hCounts"></param>
            <param name="isotopicMass"></param>
            <param name="radical"></param>
            <param name="charge"></param>
        </member>
        <member name="M:CSInChI.InChI_Atom.#ctor(System.String,System.Int32[],System.Int32,System.Int32[],System.Int32[],System.Int32[],System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a new InChI_Atom with all coordinates set to 0.
            </summary>
            <param name="symbol"></param>
            <param name="neighborIndices"></param>
            <param name="numBonds"></param>
            <param name="bondTypes"></param>
            <param name="bondStereo"></param>
            <param name="hCounts"></param>
            <param name="isotopicMass"></param>
            <param name="radical"></param>
            <param name="charge"></param>
        </member>
        <member name="M:CSInChI.InChI_Atom.#ctor(System.String,System.Int32[],System.Int32,System.Int32[],System.Int32[],System.Int32[])">
            <summary>
            Creates a new InChI_Atom in its ground state with all coordinates set to 0, no charge.
            </summary>
            <param name="symbol"></param>
            <param name="neighborIndices"></param>
            <param name="numBonds"></param>
            <param name="bondTypes"></param>
            <param name="bondStereo"></param>
            <param name="hCounts"></param>
        </member>
        <member name="F:CSInChI.InChI_Atom.X">
            <summary>
            The X coordinate of the atom.
            </summary>
        </member>
        <member name="F:CSInChI.InChI_Atom.Y">
            <summary>
            The Y coordinate of the atom.
            </summary>
        </member>
        <member name="F:CSInChI.InChI_Atom.Z">
            <summary>
            The Z coordinate of the atom.
            </summary>
        </member>
        <member name="F:CSInChI.InChI_Atom.Neighbors">
            <summary>
            An array containing the indices of neighboring atoms.
            </summary>
        </member>
        <member name="F:CSInChI.InChI_Atom.BondTypes">
            <summary>
            An array containing the data on the types of bonds
            the atom is involved in. Values are defined in the
            InChI_Bond_Type enumeration.
            </summary>
        </member>
        <member name="F:CSInChI.InChI_Atom.BondStereo">
            <summary>
            The stereo data if for the bonds the atom is involved in.
            The types are defined in the InChI_BondStereo2D enumeration.
            </summary>
        </member>
        <member name="F:CSInChI.InChI_Atom.ElementName">
            <summary>
            The elements name. A maximum of 6 characters.
            </summary>
        </member>
        <member name="F:CSInChI.InChI_Atom.NumBonds">
            <summary>
            The number of bonds the atom is involved in.
            </summary>
        </member>
        <member name="F:CSInChI.InChI_Atom.HCounts">
            <summary>
            The number of implicit hydrogen atoms. The array always has
            a length of 4.
             [0]: number of implicit non-isotopic H
              (exception: HCounts[0]=-1 means INCHI
                adds implicit H automatically),
             [1]: number of implicit isotopic 1H (protium),
             [2]: number of implicit 2H (deuterium),
             [3]: number of implicit 3H (tritium) */
            </summary>
        </member>
        <member name="F:CSInChI.InChI_Atom.IsotopicMass">
            <summary>
            The isotopic mass calculated as
            ISOTOPIC_SHIFT_FLAG + mass - (average atomic mass)
            </summary>
        </member>
        <member name="F:CSInChI.InChI_Atom.Radical">
            <summary>
            A flag defining the type of radical if any.
            The values are defined in the Radical_Type enumeration.
            </summary>
        </member>
        <member name="F:CSInChI.InChI_Atom.Charge">
            <summary>
            The charge on the atom.
            </summary>
        </member>
        <member name="T:CSInChI.Inchi_Stereo0D">
            <summary>
            A structure that holds stereo data for an InChI_Atom.
            </summary>
            <seealso cref="T:CSInChI.InChI_0D_StereoParity"/>
        </member>
        <member name="M:CSInChI.Inchi_Stereo0D.#ctor(System.Int16[],System.Int16,System.Byte,System.Byte)">
            <summary>
            Creates a new InChI_Stereo0D structure using the specified
            values.
            </summary>
            <param name="neighbors">an array containg the indices of neighboring atoms.</param>
            <param name="centralAtom">the index of the central atom</param>
            <param name="type">the type of stereo bond</param>
            <param name="parity">the stereo parity</param>
        </member>
        <member name="M:CSInChI.Inchi_Stereo0D.#ctor(System.Int32[],System.Int32,System.Int32,System.Int32)">
            <summary>
            A convenience constructor that takes regular Int32 values
            and converts them short or bytes as needed.
            </summary>
            <param name="neighbors">an array containg the indices of neighboring atoms.</param>
            <param name="centralAtom">the index of the central atom</param>
            <param name="type">the type of stereo bond</param>
            <param name="parity">the stereo parity</param>
        </member>
        <member name="F:CSInChI.Inchi_Stereo0D.Neighbors">
            <summary>
            An array containg the indices of the neighbors of a stereo center.
            The array always has length 4.
            </summary>
        </member>
        <member name="F:CSInChI.Inchi_Stereo0D.CentralAtom">
            <summary>
            The index of the central atom in a tetrahedral stereo center
            or the central atom of allene otherwise the value is -1.
            </summary>
        </member>
        <member name="F:CSInChI.Inchi_Stereo0D.Type">
            <summary>
            The type of stereo center. The possible values are defined
            in the InChI_0D_StereoType enumeration.
            </summary>
        </member>
        <member name="F:CSInChI.Inchi_Stereo0D.Parity">
            <summary>
            The parity of the stereo center. The possible values are defined
            in the Inchi_StereoParity0D enumeration.
            </summary>
        </member>
    </members>
</doc>
