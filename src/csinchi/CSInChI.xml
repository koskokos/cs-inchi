<?xml version="1.0"?>
<doc>
    <assembly>
        <name>CSInChI</name>
    </assembly>
    <members>
        <member name="T:CSInChI.InChIStrucOutput">
             <summary>
             A structure that holds structural data from the
             LibInChI.ParseInChI method. This structure should be 
             used with the try/finally pattern to ensure deallocation
             of the unmanaged memory.
             </summary>
             <seealso cref="M:CSInChI.LibInChI.ParseInChI(CSInChI.InChIStringInput@,CSInChI.InChIStrucOutput@)"/>
             
             <example>This example illustrates the use of this structure.
             <code>
            class Program
            {
                static void Main(string[] args)
                {
                    string inchi = "InChI=1/C2H2F2/c3-1-2-4/h1-2H/b2-1+";
                    InChIStringInput inp = new InChIStringInput(inchi);
                    InChIStrucOutput outStruct = new InChIStrucOutput();
            
                    try
                    {
                        int ret = LibInChI.ParseInChI(ref inp, out outStruct);
                        string retCode = InChIRetVal.GetStringVal(ret);
                        Console.WriteLine(retCode);
            
                        foreach (InChIAtom atom in outStruct.GetAtoms())
                        {
                            Console.WriteLine("{0} {1}", atom.ElementName, atom.NumBonds);
                        }
                    }
                    finally
                    {
                        //free the unmanaged memory
                        outStruct.Dispose();
                    }
                }
            }
             </code></example>
        </member>
        <member name="F:CSInChI.InChIStrucOutput.AtomsPtr">
            <summary>
            A pointer to the first atom in the array of atoms
            </summary>
        </member>
        <member name="F:CSInChI.InChIStrucOutput.StereoDataPtr">
            <summary>
            A pointer to the first Stereo0D structure in the array
            of Stereo0D structures.
            </summary>
        </member>
        <member name="F:CSInChI.InChIStrucOutput.NumAtoms">
            <summary>
            The number of atoms in the structure. Max value is
            1023.
            </summary>
        </member>
        <member name="F:CSInChI.InChIStrucOutput.NumStereo0D">
            <summary>
            The number of Stereo0D structures.
            </summary>
        </member>
        <member name="F:CSInChI.InChIStrucOutput.WarningFlags">
            <summary>
            An array of warning flags. Due to the lack of support
            for marshaling nested arrays this field has been converted
            to a 1-D array with the same total capacity.
            </summary>
        </member>
        <member name="M:CSInChI.InChIStrucOutput.GetAtoms">
            <summary>
            Converts the AtomsPtr to an array of InChIAtom structures.
            </summary>
            <returns>An array of InChIAtom structures</returns>
        </member>
        <member name="M:CSInChI.InChIStrucOutput.GetStereoData">
            <summary>
            Converts the StereoDataPtr to an array of InChIStereo0D structures.
            </summary>
            <returns>An array of InChIStereo0D structures</returns>
        </member>
        <member name="M:CSInChI.InChIStrucOutput.Dispose">
            <summary>
            Releases all unmanaged resources used by this structure.
            </summary>
        </member>
        <member name="P:CSInChI.InChIStrucOutput.ErrorMsg">
            <summary>
            A string containing error/warning messages.
            </summary>
        </member>
        <member name="P:CSInChI.InChIStrucOutput.OutputLog">
            <summary>
            A string containing a list of recognized options and 
            possibly an Error/warning message. 
            </summary>
        </member>
        <member name="T:CSInChI.InChIStringOutput">
            <summary>
            A structure that holds the output data from methods
            that create an InChI. If the fields are initalized
            by the GetInChI(ref InChIStrucInput structData, out InChIStringOutput output)
            method the try/finally pattern should be used to ensure deallocation
            of the unmanaged memory. Note that the properties of this structure convert pointers to strings
            when accessed. Repeatedly accessing these fields will lead to a loss of
            performance.
            </summary>
            <example></example>
            <seealso cref="M:CSInChI.LibInChI.GetInChI(CSInChI.InChIStrucInput@,CSInChI.InChIStringOutput@)"/>
        </member>
        <member name="M:CSInChI.InChIStringOutput.Dispose">
            <summary>
            Releases all resources used by this structure.
            </summary>
        </member>
        <member name="P:CSInChI.InChIStringOutput.InChI">
            <summary>
            A read only property that returns the InChI string.
            </summary>
        </member>
        <member name="P:CSInChI.InChIStringOutput.AuxInfo">
            <summary>
            A read only string containg the aux info.
            </summary>
        </member>
        <member name="P:CSInChI.InChIStringOutput.ErrorMessage">
            <summary>
            A read only string containing error/warning messages.
            </summary>
        </member>
        <member name="P:CSInChI.InChIStringOutput.OutputLog">
            <summary>
            A read only string containing a list of recognized options and 
            possibly an Error/warning message. 
            </summary>
        </member>
        <member name="T:CSInChI.LibInChI">
             <summary>
             A class providing access to the functions in the IUPAC InChI library.
             </summary>
             <example>This examples demonstrates how to use the various methods defined by the LibInChI class.
             This code takes an InChI string, calculates the InChI key, and outputs the structure as an sdf file 
             with the InChI key as a property. Note the use of the try/finally pattern that ensures the disposal
             of unmanaged memory even if an exception is thrown.
             <code>
                static void Main(string[] args)
                {
                    string inchi = "InChI=1/C4H6O6/c5-1(3(7)8)2(6)4(9)10/h1-2,5-7,9H/q-2/t1-,2+";
                    InChIStrucOutput outStruc = new InChIStrucOutput();
                    InChIStrucInput inStruc = new InChIStrucInput();
                    
                    try
                    {
                        LibInChI.ParseInChI(inchi, out outStruc);
            
                         //get the InChI key
                        string key = LibInChI.GetInChIKey(inchi);
            
                        //create structure data to generate the sdf file text
                        inStruc.SetAtoms(outStruc.GetAtoms());
                        inStruc.SetStereoData(outStruc.GetStereoData());
                        inStruc.Options = "/outputsdf";
            
                        string sdfText = LibInChI.GetInChI(ref inStruc);
                                   
                        //append the key to the file text as a property
                        key = "> &lt;INCHIKEY&gt;\n" + key + "\n";
                        sdfText = sdfText.Insert(sdfText.Length-4 ,key);
                    
                        File.WriteAllText("struc1.sdf",sdfText);
                    }
                    finally
                    {
                        //free the unmanaged memory
                        outStruc.Dispose();
                        inStruc.Dispose();
                    }
                } 
             /*The output is:
            
            Structure #1
               InChI v1 SDfile Output
               
             12 11  0  0  0  0  0  0  0  0  2 V2000
                    0.0000    0.0000    0.0000 C   0  0  0     0  0  0  0  0  0
                    0.0000    0.0000    0.0000 C   0  0  0     0  0  0  0  0  0
                    0.0000    0.0000    0.0000 C   0  5  0     0  0  0  0  0  0
                    0.0000    0.0000    0.0000 C   0  3  0     0  0  0  0  0  0
                    0.0000    0.0000    0.0000 O   0  0  0     0  0  0  0  0  0
                    0.0000    0.0000    0.0000 O   0  0  0     0  0  0  0  0  0
                    0.0000    0.0000    0.0000 O   0  0  0     0  0  0  0  0  0
                    0.0000    0.0000    0.0000 O   0  5  0     0  0  0  0  0  0
                    0.0000    0.0000    0.0000 O   0  0  0     0  0  0  0  0  0
                    0.0000    0.0000    0.0000 O   0  5  0     0  0  0  0  0  0
                    0.0000    0.0000    0.0000 H   0  0  0     0  0  0  0  0  0
                    0.0000    0.0000    0.0000 H   0  0  0     0  0  0  0  0  0
              1 11  1  0  0  0  0
              1  2  1  0  0  0  0
              1  3  1  0  0  0  0
              1  5  1  0  0  0  0
              2 12  1  0  0  0  0
              2  4  1  0  0  0  0
              2  6  1  0  0  0  0
              3  7  1  0  0  0  0
              3  8  1  0  0  0  0
              4  9  1  0  0  0  0
              4 10  1  0  0  0  0
            M  CHG  4   3  -1   4   1   8  -1  10  -1
            M  END
            > &lt;INCHIKEY&gt;
            YMKUERMSEJFJHY-XIXRPRMCBM
            $$$$
            */
            </code>
            <code>
            import clr
            
            clr.AddReference("CSInChI.dll")
            
            from clr import Reference
            
            from System.IO import File
            from CSInChI import *
            
            inchi = "InChI=1/C4H6O6/c5-1(3(7)8)2(6)4(9)10/h1-2,5-7,9H/q-2/t1-,2+"
            
            #create a Reference object to hold a structure passed with the out keyword
            #in CLR languages
            outStructRef = Reference[InChIStrucOutput]()
            inStruct = InChIStrucInput()
            
            try:
            
                LibInChI.ParseInChI(inchi, outStructRef)
            
                #get the InChI key
                key = LibInChI.GetInChIKey(inchi)
            
                #create structure data to generate the sdf file text
                inStruct.SetAtoms(outStructRef.Value.GetAtoms())
                inStruct.SetStereoData(outStructRef.Value.GetStereoData())
                inStruct.Options = "/outputsdf"
            
                inStrucRef = Reference[InChIStrucInput](inStruct)
                sdfText = LibInChI.GetInChI(inStrucRef)
            
                #append the key to the file text as a property
                key = "> &lt;INCHIKEY&gt;\n" + key +"\n"
            
                sdfText = sdfText[:-4] + key + sdfText[-4:]
            
                File.WriteAllText("struc1.sdf",sdfText);
            
            
            finally:
                outStructRef.Value.Dispose()
                inStruct.Dispose()
            
            
            """
             The output is:
             
            Structure #1
               InChI v1 SDfile Output
               
             12 11  0  0  0  0  0  0  0  0  2 V2000
                    0.0000    0.0000    0.0000 C   0  0  0     0  0  0  0  0  0
                    0.0000    0.0000    0.0000 C   0  0  0     0  0  0  0  0  0
                    0.0000    0.0000    0.0000 C   0  5  0     0  0  0  0  0  0
                    0.0000    0.0000    0.0000 C   0  3  0     0  0  0  0  0  0
                    0.0000    0.0000    0.0000 O   0  0  0     0  0  0  0  0  0
                    0.0000    0.0000    0.0000 O   0  0  0     0  0  0  0  0  0
                    0.0000    0.0000    0.0000 O   0  0  0     0  0  0  0  0  0
                    0.0000    0.0000    0.0000 O   0  5  0     0  0  0  0  0  0
                    0.0000    0.0000    0.0000 O   0  0  0     0  0  0  0  0  0
                    0.0000    0.0000    0.0000 O   0  5  0     0  0  0  0  0  0
                    0.0000    0.0000    0.0000 H   0  0  0     0  0  0  0  0  0
                    0.0000    0.0000    0.0000 H   0  0  0     0  0  0  0  0  0
              1 11  1  0  0  0  0
              1  2  1  0  0  0  0
              1  3  1  0  0  0  0
              1  5  1  0  0  0  0
              2 12  1  0  0  0  0
              2  4  1  0  0  0  0
              2  6  1  0  0  0  0
              3  7  1  0  0  0  0
              3  8  1  0  0  0  0
              4  9  1  0  0  0  0
              4 10  1  0  0  0  0
            M  CHG  4   3  -1   4   1   8  -1  10  -1
            M  END
            > &lt;INCHIKEY&gt;
            YMKUERMSEJFJHY-XIXRPRMCBM
            $$$$
            """
             </code>
            </example>
        </member>
        <member name="F:CSInChI.LibInChI.ISOTOPIC_SHIFT_FLAG">
            <summary>
            Constant defined in inchi_api.h
            
             Add to isotopic mass if isotopic_mass =     
             (isotopic mass - average atomic mass)
            </summary>
        </member>
        <member name="F:CSInChI.LibInChI.ISOTOPIC_SHIFT_MAX">
             <summary>
             Constant defined in inchi_api.h
            
             max abs(isotopic mass - average atomic mass)
             </summary>
        </member>
        <member name="F:CSInChI.LibInChI.MAX_BONDS">
            <summary>
            Constant defined in inchi_api.h (MAXVAL)
            The maximum number of bonds an atom can be involved in.
            </summary>
        </member>
        <member name="F:CSInChI.LibInChI.NUM_H_ISOTOPES">
            <summary>
            Constant defined in inchi_api.h
            The number of isotopes of hydrogen
            </summary>
        </member>
        <member name="F:CSInChI.LibInChI.ATOM_EL_LEN">
            <summary>
             Constant defined in inchi_api.h
             The length of the char array which stores the
             symbol for an element.
            </summary>
        </member>
        <member name="F:CSInChI.LibInChI.NO_ATOM">
            <summary>
            Constant defined in inchi_api.h.
            The value to use for the central atom
            of an InChIStereo0D structure if the stereo
            type is not allene or tetrahedral.
            </summary>
        </member>
        <member name="M:CSInChI.LibInChI.ParseInChI(CSInChI.InChIStringInput@,CSInChI.InChIStrucOutput@)">
             <summary>
             An external method that calls the GetStructFromINCHI function
             in the IUPAC InChI library. The unmanaged memory is deallocated
             when the Dispose method of the InChIStrucOutput is called.
             </summary>
             <param name="input">the structure that holds the input data</param>
             <param name="output">the structure that holds the output</param>
             <returns>an error code indicating the success or failure of the function call</returns>
             <seealso cref="M:CSInChI.LibInChI.ParseInChI(CSInChI.InChIStringInput@,CSInChI.InChIStrucOutput@)"/>
             <example>This example illustrates the use of this method.
             <code>
            class Program
            {
                static void Main(string[] args)
                {
                    string inchi = "InChI=1/C2H2F2/c3-1-2-4/h1-2H/b2-1+";
                    InChIStringInput inp = new InChIStringInput(inchi);
                    InChIStrucOutput outStruct = new InChIStrucOutput();
            
                    try
                    {
                        int ret = LibInChI.ParseInChI(ref inp, out outStruct);
                        Console.WriteLine(InChIRetVal.GetStringVal(ret));
                        
                        foreach (InChIAtom atom in outStruct.GetAtoms())
                        {
                            Console.WriteLine(atom.ElementName + " " + atom.NumBonds);
                        }
                    }
                    finally
                    {
                        //free the unmanaged memory
                        outStruct.Dispose();
                    }
                }
            }
             </code></example>
        </member>
        <member name="M:CSInChI.LibInChI.GetInChI(CSInChI.InChIStrucInput@,CSInChI.InChIStringOutput@)">
            <summary>
            An external method that calls the GetINCHI function
            in the IUPAC InChI library. The unmanaged memory is deallocated 
            when the Dispose method of the InChIStringOutput is called. It is recommended
            that programmers use one of the overloads that returns the InChI string as these
            will automatically deallocate the InChIStringOutput structure.
            </summary>
            <param name="structData">the structure that holds the input structure data</param>
            <param name="output">the structure that holds the InChI output</param>
            <returns>an error code indicating the success or failure of the function call</returns>
        </member>
        <member name="M:CSInChI.LibInChI.GetInChIKey(System.String,System.Text.StringBuilder)">
            <summary>
            An external method that calls the GetINCHIKeyFromINCHI function
            in the IUPAC InChI library. The StringBuilder that holds the output
            should be initialized with a capacity of 25. Requires version 1.0.2 or later of
            the library. 
            </summary>
            <param name="inchi">the inchi string</param>
            <param name="sb">a StringBuilder to hold the InChI key output</param>
            <returns>an error code indicating the success or failure of the function call</returns>
        </member>
        <member name="M:CSInChI.LibInChI.CheckInChIKey(System.String)">
             <summary>
             An external method that calls the CheckInChIKey function
             in the IUPAC InChI toolkit. Requires version 1.0.2 or later of
             the library.
             </summary>
             <seealso cref="T:CSInChI.CheckInChIKeyResult"/>
             <param name="inchiKey">the inchi key</param>
             <returns>an error code indicating the success or failure of the function call</returns>
            <example>This example illustrates the different possible return codes from this
            method.
            <code>
            static void Main()
            {
                List&lt;string&gt; inchiKeys = new List&lt;string&gt;()
                {
                    //valid key
                    "WFLOTYSKFUPZQB-OWOJBTEDBV",
                    //invalid length - leading and trailing white space
                    "  WFLOTYSKFUPZQB - OWOJBTEDBV  ",
                    //invalid check character 'A' should be 'V'
                    "WFLOTYSKFUPZQB-OWOJBTEDBA",
                    //key is lowercase
                    "wflotyskfupzqb-owojbtedbv"
                };
            
                int retCode;
                string checkVal;
                foreach (string key in inchiKeys)
                {
                    retCode = LibInChI.CheckInChIKey(key);
                    checkVal = CheckInChIKeyResult.GetStringVal(retCode);
                    Console.WriteLine("{0} -&gt; {1}\n", key, checkVal);
                }
            } 
            
              
             /*Console output:  
               WFLOTYSKFUPZQB-OWOJBTEDBV -&gt; VALID_KEY
            
               WFLOTYSKFUPZQB - OWOJBTEDBV   -&gt; INVALID_LENGTH
            
               WFLOTYSKFUPZQB-OWOJBTEDBA -&gt; INVALID_CHECKSUM
            
               wflotyskfupzqb-owojbtedbv -&gt; INVALID_LAYOUT
             */
             </code>
             <code>
             import clr
            
            clr.AddReference("CSInChI.dll")
            
            from CSInChI import LibInChI
            from CSInChI import CheckInChIKeyResult
            
            inchiKeys =[#valid key
                       "WFLOTYSKFUPZQB-OWOJBTEDBV",
                       #invalid length - leading and trailing white space
                       "  WFLOTYSKFUPZQB - OWOJBTEDBV  ",
                       #invalid check character
                       "WFLOTYSKFUPZQB-OWOJBTEDBA",
                       #key is lowercase
                       "wflotyskfupzqb-owojbtedbv"]
            
            for key in inchiKeys:
                checkVal = LibInChI.CheckInChIKey(key)
                print key + " -&gt; " + CheckInChIKeyResult.GetStringVal(checkVal) + "\n"
                
             """ Output:
               WFLOTYSKFUPZQB-OWOJBTEDBV -&gt; VALID_KEY
            
               WFLOTYSKFUPZQB - OWOJBTEDBV   -&gt; INVALID_LENGTH
            
               WFLOTYSKFUPZQB-OWOJBTEDBA -&gt; INVALID_CHECKSUM
            
               wflotyskfupzqb-owojbtedbv -&gt; INVALID_LAYOUT
             """
             
             </code>
             </example>
             <seealso cref="T:CSInChI.CheckInChIKeyResult"/>
        </member>
        <member name="M:CSInChI.LibInChI.DeallocateOutputStruct(CSInChI.InChIStrucOutput@)">
            <summary>
            Frees the unmanaged memory used allocated by the
            ParseInChI method. It is unecessary to explicitly call this method
            as it is called in the Dispose method of the InChIStrucOutput structure.
            </summary>
            <param name="outputStruct">the InChIStrucOutput to deallocate </param>
        </member>
        <member name="M:CSInChI.LibInChI.DeallocateInChIString(CSInChI.InChIStringOutput@)">
            <summary>
            Frees the unmanaged memory allocated by the GetInChI method.It is unecessary to explicitly call this method
            as it is called in the Dispose method of the InChIStringOutput structure.
            </summary>
            <param name="inchiOut">the InChIStringOutput to deallocate</param>
        </member>
        <member name="M:CSInChI.LibInChI.GetInChIFromInChI(CSInChI.InChIStringInput@,CSInChI.InChIStringOutput@)">
            <summary>
            An external method that calls the GetINCHIFromINCHI function
            in the IUPAC InChI library.
            </summary>
            <param name="inp">the input inchi</param>
            <param name="outStruct">the struct that will hold the output</param>
            <returns>an error code indicating the success or failure of the function call</returns>
        </member>
        <member name="M:CSInChI.LibInChI.ParseInChI(System.String,System.String,CSInChI.InChIStrucOutput@)">
             <summary>
             A convenience overload of ParseInChI that takes 2 strings
             rather than a InChIStringInput. The user is responsible for
             calling the Dispose method of the InChIStrucOutput structure to free
             unmanaged memory. Options start with '/' in Windows or 
             '-' for other platforms. See inchi_options.txt for a complete list of options.
             </summary>
             <param name="inchi">the inchi string</param>
             <param name="options">the space delimited option string</param>
             <param name="outStruct">the structure that will hold the output</param>
             <returns>an error code indicating the success or failure of the function call</returns>
                
             <example>This example illustrates the use of this method.
             <code>
            class Program
            {
                static void Main(string[] args)
                {
                    string inchi = "InChI=1/C2H2F2/c3-1-2-4/h1-2H/b2-1+";
                    
                    InChIStrucOutput outStruct = new InChIStrucOutput();
            
                    try
                    {
                        int ret = LibInChI.ParseInChI(inchi, out outStruct);
                        Console.WriteLine(InChIRetVal.GetStringVal(ret));
            
                        foreach (InChIAtom atom in outStruct.GetAtoms())
                        {
                            Console.WriteLine(atom.ElementName + " " + atom.NumBonds);
                        }
                    }
                    finally
                    {
                        //free the unmanaged memory
                        outStruct.Dispose();
                    }
                }
            }
             </code></example>
             <example>The console output:
             <code>
             OKAY
             C 3
             C 3
             F 1
             F 1
             H 1
             H 1
             </code>
             </example>
             <seealso cref="T:CSInChI.InChIStrucOutput"/>
        </member>
        <member name="M:CSInChI.LibInChI.ParseInChI(System.String,CSInChI.InChIStrucOutput@)">
            <summary>
            A convenience overload of ParseInChI that passes an empty
            option string. The user is responsible for calling the 
            Dispose method of the InChIStrucOutput structure to free
            unmanaged memory.
            </summary>
            <param name="inchi">the inchi string</param>
            <param name="outStruct">the structure that will hold the output</param>
            <returns>an error code indicating the success or failure of the function call</returns>
            <seealso cref="T:CSInChI.InChIStrucOutput"/>
        </member>
        <member name="M:CSInChI.LibInChI.GetInChI(CSInChI.InChIStrucInput@)">
            <summary>
            A convenience overload of GetInChI that returns the inchi string
            or an empty string if the underlying platform invoke call fails.
            This method frees all unmanaged resources allocated by the 
            underlying platform invoke call.
            </summary>
            <param name="inp">the input structural data</param>
            <returns>an error code indicating the success or failure of the function call</returns>
        </member>
        <member name="M:CSInChI.LibInChI.GetInChI(CSInChI.InChIStrucInput@,System.Int32@)">
            <summary>
            A convenience overload of GetInChI that returns the inchi string
            or an empty string if the underlying platform invoke call fails.
            This method frees all unmanaged resources allocated by the underlying 
            platform invoke call. 
            </summary>
            <param name="inp">the structure holding the input data</param>
            <param name="retCode">an integer to store the return value from the underlying platform invoke call</param>
            <returns>the inchi code or the empty string</returns>
        </member>
        <member name="M:CSInChI.LibInChI.GetInChIKey(System.String)">
             <summary>
             A convenience overload of GetInChIKey that takes a string input. 
             The method returns an empty string or null if the underlying
             platform invoke call fails. 
             </summary>
             <param name="inchi">the input inchi</param>
             <returns>the inchi key</returns>
             <example>This example illustrates the use of this method from C# and Iron Python.
             <code>
             class Program
             {
                 public static void Main()
                 {
                     int retVal;
                     
                     string key = LibInChI.GetInChIKey("InChI=1/C2H2F2/c3-1-2-4/h1-2H/b2-1+",retVal);
                     
                     Console.WriteLine(key);
                 }
             }
             
             //Output:
             //  WFLOTYSKFUPZQB-OWOJBTEDBV
             </code>
             <code>
            import clr
            
            clr.AddReference("CSInChI.dll")
            
            from CSInChI import LibInChI
            
            key = LibInChI.GetInChIKey("InChI=1/C2H2F2/c3-1-2-4/h1-2H/b2-1+")
            
            print key
            
            #Output:
            #    WFLOTYSKFUPZQB-OWOJBTEDBV
            </code>
             </example>
        </member>
        <member name="M:CSInChI.LibInChI.GetInChIKey(System.String,System.Int32@)">
             <summary>
             A convenience overload of GetInChIKey that takes a string input. The method 
             returns an empty string or null if the underlying
             platform invoke call fails. The int parameter stores the return value
             from the unmanaged function.
             </summary>
             <param name="inchi">the inchi string</param>
             <param name="retCode">an int that holds the return value of the underlying function</param>
             <returns>the inchi key</returns>
             <example>This example illustrates using this method from C# and Iron Python.
             <code>
             class Program
             {
                 public static void Main()
                 {
                     int retVal;
                     string key = LibInChI.GetInChIKey("InChI=1/C2H2F2/c3-1-2-4/h1-2H/b2-1+",retVal);
                     string outCode = GetInChIKeyRetVal.GetStringVal(retVal.Value);
                     Console.WriteLine("{0} {1}",outCode,key);
                 }
             }
             
             //Output:
             //  OKAY WFLOTYSKFUPZQB-OWOJBTEDBV
             </code>
             <code>
            import clr
            
            clr.AddReference("CSInChI.dll")
            
            #used to store properties passed with the ref or out
            #keywords in a CLR language
            from clr import Reference
            
            from CSInChI import LibInChI
            from CSInChI import GetInChIKeyRetVal
            
            #initalize the object that holds the return code
            retVal = Reference[int]()
            
            key = LibInChI.GetInChIKey("InChI=1/C2H2F2/c3-1-2-4/h1-2H/b2-1+",retVal)
            outCode = GetInChIKeyRetVal.GetStringVal(retVal.Value)
            
            print outCode,key
            
            #Output:
            #    OKAY WFLOTYSKFUPZQB-OWOJBTEDBV
             </code>
             </example>
        </member>
        <member name="M:CSInChI.LibInChI.GetInChIFromInChI(System.String,System.String)">
             <summary>
             A convenience overload of GetInChIFromInChI that takes two strings.
             invoke call. The method returns an empty string or null if the underlying
             platform invoke call fails. Options start with '/' in Windows or 
             '-' for other platforms. See inchi_options.txt for a complete list of options.
             This method frees all unmanaged resources allocated by the underlying platform
             invoke call.
             </summary>
             <param name="inputInChI">the input inchi</param>
             <param name="options">the space delimited options string</param>
             <returns>the output inchi or an empty string</returns>
            <example>This example shows how to use this method to convert
             an InChI string to its compressed equivalent and display the
             return code from the underlying unmanaged function.
            <code>
             class Program
             {
                 static void Main()
                 {
                     string inInChI = "InChI=1/C6H6/c1-2-4-6-5-3-1/h1-6H";
                     
                     string outInChI = LibInChI.GetInChIFromInChI(inInChI, "/compress");
             
                     Console.WriteLine(outInChI);
                 }
             }
             
             //Output:
             //  InChI=1/C6H6/cAE1ABFD/hAF1
            </code>
            <code>
            import clr
            clr.AddReference("CSInChI.dll")
            
            from CSInChI import LibInChI
            
            inInChI = "InChI=1/C6H6/c1-2-4-6-5-3-1/h1-6H"
            
            compInChI = LibInChI.GetInChIFromInChI(inInChI,"/compress")
            
            print compInChI
             
            #Output"
            #   InChI=1/C6H6/cAE1ABFD/hAF1
            </code>
             </example>
        </member>
        <member name="M:CSInChI.LibInChI.GetInChIFromInChI(System.String,System.String,System.Int32@)">
             <summary>
             A convenience overload of GetInChIFromInChI that takes two strings.
             The int parameter stores the return value of the underlying platform
             invoke call. The method returns null or an empty string if the underlying
             platform invoke call fails. Options start with '/' in Windows or '-' for 
             other platforms. See inchi_options.txt for a complete list of options. This method frees all unmanaged
             resources allocated by the underlying platform invoke call.
             </summary>
             <param name="inputInChI">the input inchi</param>
             <param name="options">the space delimited options string</param>
             <param name="retCode">an integer to store the return value of the unmanaged function</param>
             <returns>the output inchi, null, or an empty string</returns>
             <example>This example shows how to use this method to convert
             an InChI string to its compressed equivalent.
             <code>
             class Program
             {
                 static void Main(string[] args)
                 {
                     string inInChI = "InChI=1/C6H6/c1-2-4-6-5-3-1/h1-6H";
                     int retCode;
                     string outInChI = LibInChI.GetInChIFromInChI(inInChI, "/compress", out retCode);
                     string result = InChIRetVal.GetStringVal(retCode);
                     Console.WriteLine(result);
                     Console.WriteLine(outInChI);
                 }
             }
             
             //Output:
             //    OKAY
             //    InChI=1/C6H6/cAE1ABFD/hAF1
             </code>
             <code>
            import clr
            
            clr.AddReference("CSInChI.dll")
            
            #used to store properties passed with the ref or out
            #keywords in a CLR language
            from clr import Reference
            
            from CSInChI import LibInChI
            
            inInChI = "InChI=1/C6H6/c1-2-4-6-5-3-1/h1-6H"
            
            #initalize the object that holds the return code
            retCode = Reference[int]()
             
            compInChI = LibInChI.GetInChIFromInChI(inInChI, "/compress", retCode)
            result = InChIRetVal.GetStringVal(retCode.Value);
            
            print result
            print compInChI
             
            #Output:
            #   OKAY
            #   InChI=1/C6H6/cAE1ABFD/hAF1 
             </code>
             </example>
        </member>
        <member name="T:CSInChI.InChIStringInput">
             <summary>
             A struct that holds the input data for the ParseInChI(ref InChIStringInput input, out InChIStrucOutput output) method.
             </summary>
            <seealso cref="M:CSInChI.LibInChI.ParseInChI(CSInChI.InChIStringInput@,CSInChI.InChIStrucOutput@)"/>
        </member>
        <member name="M:CSInChI.InChIStringInput.#ctor(System.String,System.String)">
            <summary>
            Creates a new InChIStringInput struct with the specified
            space delimited options string. See inchi_options.txt for a complete list of options.
            </summary>
            <param name="inchiString">the inchi string</param>
            <param name="options">the string containing the list of options</param>
        </member>
        <member name="M:CSInChI.InChIStringInput.#ctor(System.String)">
            <summary>
            Creates a new InChIStringInput with an empty options
            string.
            </summary>
            <param name="inchiString">the inchi string</param>
        </member>
        <member name="P:CSInChI.InChIStringInput.InChI">
            <summary>
            The InChI string.
            </summary>
        </member>
        <member name="P:CSInChI.InChIStringInput.Options">
            <summary>
            The space delimited string of options. Options start with
            '/' in Windows or '-' for other platforms.
            </summary>
        </member>
        <member name="T:CSInChI.InChIStrucInput">
            <summary>
            A struct that holds input structural data for the GetInChI
            method. The user is responsible for calling the Dispose method to ensure
            that unmanaged resources are deallocated. This structure should be used with the try/finally
            pattern to ensure that the Dispose method is called even if an exception occurs.  
            </summary>
            <seealso cref="M:CSInChI.LibInChI.GetInChI(CSInChI.InChIStrucInput@,CSInChI.InChIStringOutput@)"/>
        </member>
        <member name="M:CSInChI.InChIStrucInput.#ctor(System.Collections.Generic.IEnumerable{CSInChI.InChIAtom})">
            <summary>
            Creates a new instance of this structure with no
            stereo data and an empty options string.
            </summary>
            <param name="atoms"></param>
        </member>
        <member name="M:CSInChI.InChIStrucInput.#ctor(System.Collections.Generic.IEnumerable{CSInChI.InChIAtom},System.Collections.Generic.IEnumerable{CSInChI.InChIStereo0D},System.String)">
            <summary>
            Creates a new instance from the specified inputs. See inchi_options.txt for a complete list of options.
            </summary>
            <param name="atoms">the atoms contained by this structure</param>
            <param name="stereoData">the stereo data</param>
            <param name="options">the space delimited options string</param>
        </member>
        <member name="M:CSInChI.InChIStrucInput.#ctor(System.Collections.Generic.IEnumerable{CSInChI.InChIAtom},System.String)">
            <summary>
            Creates a new InChIStrucInput with no stereo data. See inchi_options.txt for a complete list of options.
            </summary>
            <param name="atoms">an IEnumerable of atoms to add to this structure</param>
            <param name="options">the space delimited options string</param>
        </member>
        <member name="F:CSInChI.InChIStrucInput.AtomsPtr">
            <summary>
            A pointer to the first atom in the array of atoms
            </summary>
        </member>
        <member name="F:CSInChI.InChIStrucInput.StereoDataPtr">
            <summary>
            A pointer to the first Stereo0D structure in the array
            of Stereo0D structures.
            </summary>
        </member>
        <member name="M:CSInChI.InChIStrucInput.SetAtoms(System.Collections.Generic.IEnumerable{CSInChI.InChIAtom})">
            <summary>
            Converts an IEnumerable of InChI_Atoms into a series of pointers
            in unmanaged memory and sets the internal pointer used
            when this structure is marshaled 
            </summary>
            <param name="atoms">the array of InChI_Atoms to set.</param>
        </member>
        <member name="M:CSInChI.InChIStrucInput.SetStereoData(System.Collections.Generic.IEnumerable{CSInChI.InChIStereo0D})">
            <summary>
            Converts an IEnumerable of InChIStereo0D structures into a series
            of pointers in unmanaged memory and sets the internal pointer used
            when this structure is marshaled. 
            </summary>
            <param name="stereoData">the array of InChIStereo0D structures</param>
        </member>
        <member name="M:CSInChI.InChIStrucInput.AddStereo0D(CSInChI.InChIStereo0D)">
            <summary>
            Adds an InChIStereo0D to this structure.
            </summary>
            <param name="stereo"></param>
        </member>
        <member name="M:CSInChI.InChIStrucInput.AddAtom(CSInChI.InChIAtom)">
            <summary>
            Adds an InChIAtom to this structure. 
            </summary>
            <param name="atom"></param>
        </member>
        <member name="M:CSInChI.InChIStrucInput.Dispose">
            <summary>
            Releases all unmanaged resources used by this structure.
            </summary>
        </member>
        <member name="P:CSInChI.InChIStrucInput.Options">
            <summary>
            The space delimited string of options. Options start with
            '-' or '/' depending on the platform.
            </summary>
        </member>
        <member name="P:CSInChI.InChIStrucInput.NumAtoms">
            <summary>
            The number of AtomsPtr in the structure. Max value is
            1023.
            </summary>
        </member>
        <member name="P:CSInChI.InChIStrucInput.NumStereo0D">
            <summary>
            The number of Stereo0D structures.
            </summary>
        </member>
        <member name="T:CSInChI.InChIRetVal">
            <summary>
            A set of constants for the error codes returned by the
            LibInChI.GetInChI, GetInChIFromInChI, and ParseInChI methods. 
            </summary>
            <seealso cref="M:CSInChI.LibInChI.GetInChI(CSInChI.InChIStrucInput@,CSInChI.InChIStringOutput@)"/>
            <seealso cref="M:CSInChI.LibInChI.ParseInChI(CSInChI.InChIStringInput@,CSInChI.InChIStrucOutput@)"/>
        </member>
        <member name="F:CSInChI.InChIRetVal.SKIP">
            <summary>
            Not used in the InChI library. The value is included only for completeness.
            </summary>
        </member>
        <member name="F:CSInChI.InChIRetVal.EOF">
            <summary>
            -1  = No structural data has been provided
            </summary>
        </member>
        <member name="F:CSInChI.InChIRetVal.OKAY">
            <summary>
            0 = Success; no errors or warnings 
            </summary>
        </member>
        <member name="F:CSInChI.InChIRetVal.WARNING">
            <summary>
            1 = Success; warning(s) issued
            </summary>
        </member>
        <member name="F:CSInChI.InChIRetVal.ERROR">
            <summary>
            2 = Error: no InChI has been created 
            </summary>
        </member>
        <member name="F:CSInChI.InChIRetVal.FATAL">
            <summary>
            3 = Severe error: no InChI has been created (typically; memory allocation failure) 
            </summary>
        </member>
        <member name="F:CSInChI.InChIRetVal.UNKNOWN">
            <summary>
            4 = Unknown program error 
            </summary>
        </member>
        <member name="F:CSInChI.InChIRetVal.BUSY">
            <summary>
            5 = A previous call to InChI has not returned yet.
            </summary> 
        </member>
        <member name="M:CSInChI.InChIRetVal.GetStringVal(System.Int32)">
            <summary>
            Converts a return code from the ParseInChI and GetInChI
            methods to a string representation of the value.
            </summary>
            <param name="retVal"></param>
            <returns></returns>
        </member>
        <member name="T:CSInChI.BondType">
            <summary>
            A set of constants corresponding to InChI bond types.
            </summary>
            <seealso cref="T:CSInChI.InChIAtom"/>
        </member>
        <member name="F:CSInChI.BondType.NONE">
            <summary>
            0 = No bond type specified.
            </summary>
        </member>
        <member name="F:CSInChI.BondType.SINGLE">
            <summary>
            1 = A single bond.
            </summary>
        </member>
        <member name="F:CSInChI.BondType.DOUBLE">
            <summary>
            2 = A double bond.
            </summary>
        </member>
        <member name="F:CSInChI.BondType.TRIPLE">
            <summary>
            3 = A triple bond.
            </summary>
        </member>
        <member name="F:CSInChI.BondType.ALTERN">
            <summary>
            4 = An unspecified bond type.
            Avoid using this constant by all means.
            </summary>
        </member>
        <member name="T:CSInChI.RadicalType">
            <summary>
            A set of constants corresponding to InChI Radical types.
            </summary>
            <seealso cref="T:CSInChI.InChIAtom"/>
        </member>
        <member name="F:CSInChI.RadicalType.NONE">
            <summary></summary>
        </member>
        <member name="F:CSInChI.RadicalType.SINGLET">
            <summary></summary>
        </member>
        <member name="F:CSInChI.RadicalType.DOUBLET">
            <summary></summary>
        </member>
        <member name="F:CSInChI.RadicalType.TRIPLET">
            <summary></summary>
        </member>
        <member name="T:CSInChI.StereoParity0D">
             <summary>
             A set of constants defining the 0D stereo parities
             used by the InChI library.
            
              Stereo_Parties.txt for complete details on how to use
              0D stereo parities.
             </summary>
             <seealso cref="T:CSInChI.InChIStereo0D"/>
        </member>
        <member name="F:CSInChI.StereoParity0D.INCHI_PARITY_NONE">
            <summary>
            
            </summary>
        </member>
        <member name="F:CSInChI.StereoParity0D.INCHI_PARITY_ODD">
            <summary>
            
            </summary>
        </member>
        <member name="F:CSInChI.StereoParity0D.INCHI_PARITY_UNDEFINED">
            <summary>
            Stereo parity is undefined. This value should
            only be used when only disconnected structure parity exists.
            </summary>
        </member>
        <member name="T:CSInChI.StereoType0D">
            <summary>
            A set of constants defining the types of stereo center
            handled by the InChI library.
            </summary>
            <seealso cref="T:CSInChI.InChIStereo0D"/>
        </member>
        <member name="F:CSInChI.StereoType0D.NONE">
            <summary>
            
            </summary>
        </member>
        <member name="F:CSInChI.StereoType0D.DOUBLEBOND">
            <summary>
            Indicates stereo chemistry about a double bond.
            The central atom index should be set to -1 when
            using this stereo type.
            </summary>
        </member>
        <member name="F:CSInChI.StereoType0D.TETRAHEDRAL">
            <summary>
            Indicates a tetrahedral the stereo center 
            </summary>
        </member>
        <member name="F:CSInChI.StereoType0D.ALLENE">
            <summary>
            Stereo type used for allenes.
             The central atom index should be set to -1 when
            using this stereo type.
            </summary>
        </member>
        <member name="T:CSInChI.InChIBondStereo2D">
            <summary>
            A set of constants defining the types of 2D stereo
            bond used by this InChI library. These values are used only if all neighbors of 
            this atom have same z-coordinate.
            as this atom
            </summary>
        </member>
        <member name="F:CSInChI.InChIBondStereo2D.INCHI_BOND_STEREO_DOUBLE_EITHER">
            <summary>
            Unknown stereobond geometry
            </summary>
        </member>
        <member name="T:CSInChI.GetInChIKeyRetVal">
            <summary>
            A set of constants corresponding to error codes
            returned by the GetINCHIKey
            </summary>
            <seealso cref="M:CSInChI.LibInChI.GetInChIKey(System.String,System.Text.StringBuilder)"/>
        </member>
        <member name="F:CSInChI.GetInChIKeyRetVal.OKAY">
            <summary>
            0 = The InChI key was successully generated. 
            </summary>
        </member>
        <member name="F:CSInChI.GetInChIKeyRetVal.UNKNOWN_ERROR">
            <summary>
            An error code return when an unspecified error
            occurs when calculating the InChI key. 
            </summary>
        </member>
        <member name="F:CSInChI.GetInChIKeyRetVal.EMPTY_INPUT">
            <summary>
            The error code returned when input string had a null value.
            </summary>
        </member>
        <member name="F:CSInChI.GetInChIKeyRetVal.NOT_INCHI_INPUT">
            <summary>
            The error code returned when the input string is not a
            valid InChI string.
            </summary>
        </member>
        <member name="F:CSInChI.GetInChIKeyRetVal.NOT_ENOUGH_MEMORY">
            <summary>
            An error code returned when the InChI library
            function cannot allocate the memory required
            to compute an InChI key.
            </summary>
        </member>
        <member name="F:CSInChI.GetInChIKeyRetVal.ERROR_IN_FLAG_CHAR">
            <summary>
            The error code returned if the length of the input InChI
            is less than 9. 
            </summary>
        </member>
        <member name="M:CSInChI.GetInChIKeyRetVal.GetStringVal(System.Int32)">
            <summary>
            Gets a string representation of the return code
            from the GetInChIKey method
            </summary>
            <param name="retVal"></param>
            <returns></returns>
            <seealso cref="M:CSInChI.LibInChI.GetInChIKey(System.String,System.Text.StringBuilder)"/>
        </member>
        <member name="T:CSInChI.CheckInChIKeyResult">
            <summary>
            A set of constants for the return values of the
            CheckInChIKey method
            </summary>
            <seealso cref="M:CSInChI.LibInChI.CheckInChIKey(System.String)"/>
        </member>
        <member name="F:CSInChI.CheckInChIKeyResult.VALID_KEY">
            <summary>
            The input value was a valid InChI key.
            </summary>
        </member>
        <member name="F:CSInChI.CheckInChIKeyResult.INVALID_LENGTH">
            <summary>
            Error code indicating that the length of the input key was not 25
            characters.
            </summary>
        </member>
        <member name="F:CSInChI.CheckInChIKeyResult.INVALID_LAYOUT">
            <summary>
            Error code indicating that the key had 1 or more
            invalid characters. This return code indicates that one of the following is true
            
            The 14th char is not a '-'
            A character other than an upper case letter is present in the rest of the string 
            The key has an 'E' at position 0, 3, 6, 9, 15, or 18
            </summary>
        </member>
        <member name="F:CSInChI.CheckInChIKeyResult.INVALID_CHECKSUM">
            <summary>
            Error code indicating that the check character (last character in the key)
            does not match the check sum calculated by CheckInChIKey.
            </summary>
        </member>
        <member name="M:CSInChI.CheckInChIKeyResult.GetStringVal(System.Int32)">
            <summary>
            Converts a return code from the CheckInChIKey
            method to a string representation of the value.
            </summary>
            <param name="retVal"></param>
            <returns></returns>
        </member>
        <member name="T:CSInChI.InChIAtom">
            <summary>
            A structure that holds atom data for input or output from InChI 
            library functions. Be sure to inital all arrays to the size
            specified by the MarshalAs attribute.
            </summary>
        </member>
        <member name="M:CSInChI.InChIAtom.#ctor(System.String)">
            <summary>
            Creates a new InChIAtom with the specified symbol and leaves setting the 
            HCounts to the InChI library.
            </summary>
            <param name="symbol"></param>
        </member>
        <member name="M:CSInChI.InChIAtom.#ctor(System.String,System.Int32)">
            <summary>
            Creates a new InChI atom using the symbol and implicit H count.
            </summary>
            <param name="symbol"></param>
            <param name="impHCount"></param>
        </member>
        <member name="M:CSInChI.InChIAtom.#ctor(System.String,System.Double,System.Double,System.Double)">
            <summary>
            Creates a new InChIAtom with the specified symbol and coordinates. 
            Implicit HCounts are set by InChI library.
            </summary>
            <param name="symbol"></param>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
        </member>
        <member name="M:CSInChI.InChIAtom.#ctor(System.String,System.Double,System.Double,System.Double,System.Int32)">
            <summary>
            Creates a new InChIAtom with the specified symbol and coordinates. 
            Implicit HCounts are set by InChI library.
            </summary>
            <param name="symbol"></param>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
            /// <param name="impHCount"></param>
        </member>
        <member name="M:CSInChI.InChIAtom.#ctor(System.String,System.Double,System.Double,System.Double,System.Int16[],System.Int16,System.SByte[],System.SByte[],System.SByte[],System.Byte,System.SByte,System.SByte)">
            <summary>
            Creates a new InChIAtom with all possible values explicitly specified.
            </summary>
            <param name="symbol"></param>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
            <param name="neighborIndices"></param>
            <param name="numBonds"></param>
            <param name="bondTypes"></param>
            <param name="bondStereo"></param>
            <param name="hCounts"></param>
            <param name="isotopicMass"></param>
            <param name="radical"></param>
            <param name="charge"></param>
        </member>
        <member name="M:CSInChI.InChIAtom.SetCoords(System.Double,System.Double,System.Double)">
            <summary>
            Sets the coordinates of this atom.
            </summary>
            <param name="x">the X coordinate</param>
            <param name="y">the Y coordinate</param>
            <param name="z">the Z coordinate</param>
        </member>
        <member name="P:CSInChI.InChIAtom.X">
            <summary>
            The X coordinate of the atom.
            </summary>
        </member>
        <member name="P:CSInChI.InChIAtom.Y">
            <summary>
            The Y coordinate of the atom.
            </summary>
        </member>
        <member name="P:CSInChI.InChIAtom.Z">
            <summary>
            The Z coordinate of the atom.
            </summary>
        </member>
        <member name="P:CSInChI.InChIAtom.Coords">
            <summary>
            Gets an array containing the coordinates of this atom
            or sets the coordinates from an array of length 3.
            </summary>
        </member>
        <member name="P:CSInChI.InChIAtom.Neighbors">
            <summary>
            An array containing the indices of neighboring atoms.
            The array must always have a length of 20 if it is initalized in managed code.
            </summary>
        </member>
        <member name="P:CSInChI.InChIAtom.BondTypes">
            <summary>
            An array containing the data on the types of bonds
            the atom is involved in. Values are defined in the
            InChI_Bond_Type enumeration. The array must always 
            have a length of 20 if it is initalized in managed code.
            </summary>
        </member>
        <member name="P:CSInChI.InChIAtom.BondStereo">
             <summary>
            The stereo data if for the bonds the atom is involved in.
            The types are defined in the InChIBondStereo2D enumeration.
            The array must always have a length of 20 if it is initalized
            in managed code.
             </summary>
        </member>
        <member name="P:CSInChI.InChIAtom.ElementName">
            <summary>
            The element name. A maximum of 6 characters.
            </summary>
        </member>
        <member name="P:CSInChI.InChIAtom.NumBonds">
            <summary>
            The number of bonds the atom is involved in.
            </summary>
        </member>
        <member name="P:CSInChI.InChIAtom.HCounts">
            <summary>
            The number of implicit hydrogen atoms. The array must always 
            have a length of 4.
             [0]: number of implicit non-isotopic H
                 (exception: HCounts[0]=-1 means INCHI
                 adds implicit H automatically),
             [1]: number of implicit isotopic 1H (protium),
             [2]: number of implicit 2H (deuterium),
             [3]: number of implicit 3H (tritium) */
            </summary>
            
        </member>
        <member name="P:CSInChI.InChIAtom.IsotopicMass">
            <summary>
            The isotopic mass calculated as
            ISOTOPIC_SHIFT_FLAG + mass - (average atomic mass)
            </summary>
        </member>
        <member name="P:CSInChI.InChIAtom.Radical">
            <summary>
            A flag defining the type of radical if any.
            The values are defined in the Radical_Type enumeration.
            </summary>
        </member>
        <member name="P:CSInChI.InChIAtom.Charge">
            <summary>
            The charge on the atom.
            </summary>
        </member>
        <member name="T:CSInChI.InChIStereo0D">
            <summary>
            A structure that holds stereo data for an InChIAtom.
            </summary>
            <seealso cref="T:CSInChI.StereoParity0D"/>
        </member>
        <member name="M:CSInChI.InChIStereo0D.#ctor(System.Int32[],System.Int32)">
            <summary>
            Creates a new InChIStereo0D struct representing stereo chemistry
            about a double bond. The CentralAtom is set to <b>LibInChI.NO_ATOM</b>
            </summary>
            <param name="neighbors"></param>
            <param name="parity"></param>
        </member>
        <member name="M:CSInChI.InChIStereo0D.#ctor(System.Int16[],System.SByte)">
            <summary>
            Creates a new InChIStereo0D struct representing stereo chemistry
            about a double bond. The CentralAtom is set to <b>LibInChI.NO_ATOM</b>
            </summary>
            <param name="neighbors"></param>
            <param name="parity"></param>
        </member>
        <member name="M:CSInChI.InChIStereo0D.#ctor(System.Int16[],System.Int16,System.SByte,System.SByte)">
            <summary>
            Creates a new InChIStereo0D structure using the specified
            values.
            </summary>
            <param name="neighbors">an array containg the indices of neighboring atoms.</param>
            <param name="centralAtom">the index of the central atom</param>
            <param name="type">the type of stereo bond</param>
            <param name="parity">the stereo parity</param>
        </member>
        <member name="M:CSInChI.InChIStereo0D.#ctor(System.Int32[],System.Int32,System.Int32,System.Int32)">
            <summary>
            A convenience constructor that takes regular Int32 values
            and converts them short or bytes as needed.
            </summary>
            <param name="neighbors">an array containg the indices of neighboring atoms.</param>
            <param name="centralAtom">the index of the central atom</param>
            <param name="type">the type of stereo bond</param>
            <param name="parity">the stereo parity</param>
        </member>
        <member name="P:CSInChI.InChIStereo0D.Neighbors">
            <summary>
            An array containg the indices of the neighbors of a stereo center.
            The array must always have a length of 4.
            </summary>
        </member>
        <member name="P:CSInChI.InChIStereo0D.CentralAtom">
            <summary>
            The index of the central atom in a tetrahedral stereo center
            or the central atom of allene otherwise the value is -1.
            </summary>
        </member>
        <member name="P:CSInChI.InChIStereo0D.Type">
            <summary>
            The type of stereo center. The possible values are defined
            in the InChI_0D_StereoType enumeration.
            </summary>
        </member>
        <member name="P:CSInChI.InChIStereo0D.Parity">
            <summary>
            The parity of the stereo center. The possible values are defined
            in the Inchi_StereoParity0D enumeration.
            </summary>
        </member>
    </members>
</doc>
